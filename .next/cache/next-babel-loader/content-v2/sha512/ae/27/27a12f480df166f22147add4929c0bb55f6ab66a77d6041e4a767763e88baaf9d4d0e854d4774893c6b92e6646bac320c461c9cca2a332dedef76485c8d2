{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { React, Fragment } from \"react\";\nimport classes from \"../../components/meetups/MeetupDetail.module.css\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\n\nfunction meetupDetails(props) {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupDetails.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupDetails.description\n      })]\n    }), /*#__PURE__*/_jsxs(\"section\", {\n      className: classes.detail,\n      children: [/*#__PURE__*/_jsx(\"img\", {\n        src: props.meetupDetails.image,\n        alt: props.meetupDetails.title\n      }), /*#__PURE__*/_jsx(\"h1\", {\n        children: props.meetupDetails.title\n      }), /*#__PURE__*/_jsx(\"address\", {\n        children: props.meetupDetails.address\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: props.meetupDetails.title\n      })]\n    })]\n  });\n} //fallback false - paths contain all supported values like if enter m2 get 404 and pregenerate pages like which are vsisted nore frequently\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://hrusikesh:89MZ5N3uL4YZJiGg@cluster0.x0hfv.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupcollections = db.collection(\"meetups\");\n  const result = await meetupcollections.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: result.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://hrusikesh:89MZ5N3uL4YZJiGg@cluster0.x0hfv.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupcollections = db.collection(\"meetups\");\n  const selectedMeetup = await meetupcollections.findOne({\n    _id: ObjectId(meetId)\n  });\n  return {\n    props: {\n      meetupDetails: {\n        image: selectedMeetup.image,\n        id: selectedMeetup._id.toString(),\n        address: selectedMeetup.address,\n        title: selectedMeetup.title\n      }\n    }\n  };\n}\nexport default meetupDetails;","map":null,"metadata":{},"sourceType":"module"}