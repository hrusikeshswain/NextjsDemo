{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MongoClient } from 'mongodb';\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport Head from 'next/head';\nimport { Fragment } from 'react';\nconst DUMMY_LIST = [{\n  id: 'm1',\n  title: 'Hello',\n  image: 'https://picsum.photos/seed/picsum/200/300',\n  address: 'Demo Address'\n}]; //Next js always take the first render cycle doesnt wait for the next render cycle\n//built in pre render cycle good for search engine optimization but may be show some blank pages beaciuse takes time for render on browser\n//two forms of pre render cycle static generation and server side rendering\n//Metadata for deployment description meta tags for show up in google search and page title show in search and tab in which opened\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React Meetups\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupList, {\n      meetups: props.meetups\n    })]\n  });\n} // export async function ServerSideProps(context){\n//     const req = context.req;\n//     const res = context.res;\n//     return {\n//      props:{\n//        meetups:DUMMY_LIST\n//      }\n//     };\n// }\n//called before first render cycle starts\n//execcutes during build process\n//never execute on their machine\n//revalidate will generate after every 10 secs on server side\n\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect('mongodb+srv://hrusikesh:89MZ5N3uL4YZJiGg@cluster0.x0hfv.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupcollections = db.collection('meetups');\n  const result = await meetupcollections.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: result.map(meetup => ({\n        title: meetup.title,\n        image: meetup.image,\n        address: meetup.address,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}